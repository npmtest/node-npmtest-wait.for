{"/home/travis/build/npmtest/node-npmtest-wait.for/test.js":"/* istanbul instrument in package npmtest_wait_for */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wait.for/lib.npmtest_wait.for.js":"/* istanbul instrument in package npmtest_wait_for */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_wait_for = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_wait_for = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-wait.for/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-wait.for && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_wait_for */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_wait_for\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_wait_for.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_wait_for.rollup.js'] =\n            local.assetsDict['/assets.npmtest_wait_for.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_wait_for.__dirname + '/lib.npmtest_wait_for.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wait.for/node_modules/wait.for/waitfor.js":"/* node wait.for\n - Sequential programming for node.js\n - Copyright 2013 Lucio Tato\n*/\n\n\"use strict\";\nvar Fiber = require('fibers');\n\nvar wait = {\n\n    launchFiber: function(fn){ // wait.launchFiber(fn,arg1,arg2...)\n\n        if (typeof fn !== 'function') throw new Error('first argument must be a function');\n        var newargs=Array.prototype.slice.call(arguments,1); // remove function from args\n        Fiber( function(){ fn.apply(null, newargs)} ).run(); //launch new fiber, call the fn with the args, this=null (strict)\n    }\n\n    ,applyAndWait: function(thisValue,fn,args){ // like js fn.apply, but wait for results\n\n        var fiber=Fiber.current;\n        if (!fiber) throw new Error('wait.for can only be called inside a fiber');\n\n        var fnName = fn.name;\n\n        //create a closure to resume on callback\n        var resumeCallback=function(err,data){\n                            if (fiber.callbackAlreadyCalled)\n                                 throw new Error(\"Callback for function \"+fnName+\" called twice. Wait.for already resumed the execution.\");\n                            fiber.callbackAlreadyCalled = true;\n                            fiber.err=err; //store err on fiber object\n                            fiber.data=data; //store data on fiber object\n                            if (!fiber.yielded) {//when callback is called *before* async function returns\n                                // no need to \"resume\" because we never got the chance to \"yield\"\n                                return;\n                            }\n                            else {\n                                //resume fiber after \"yield\"\n                                fiber.run();   \n                            }\n                        };\n\n        args.push(resumeCallback);//add resumeCallback to arguments\n\n        fiber.callbackAlreadyCalled=false;\n        fiber.yielded = false;\n        fn.apply(thisValue, args); //call async function/method\n        if (!fiber.callbackAlreadyCalled) { //except callback was called before async fn return\n            fiber.yielded = true;\n            Fiber.yield(); //pause fiber, until callback => wait for results\n        }\n\n        if (fiber.err) throw fiber.err; //auto throw on error\n        return fiber.data; //return data on success\n    }\n\n    ,for: function(fn){ // wait.for(fn,arg1,arg2,...)\n\n        if (typeof fn !== 'function') throw new Error('wait.for: first argument must be an async function');\n\n        var newargs=Array.prototype.slice.call(arguments,1); // remove function from args\n\n        return wait.applyAndWait(null,fn,newargs); \n    }\n\n    ,forMethod: function(obj,methodName){ // wait.forMethod(MyObj,'select',....)\n\n        var method=obj[methodName];\n        if (!method) throw new Error('wait.forMethod: second argument must be the async method name (string)');\n        \n        var newargs=Array.prototype.slice.call(arguments,2); // remove obj and method name from args\n        return wait.applyAndWait(obj,method,newargs);\n    }\n\n};\n\n//parallel extensions\n/*\nMain Functions:\n\nwait.parallel.launch = function(functions)\n----------------------\n     \n     Note: must be in a Fiber\n    \n     input: \n        functions: Array = [func,arg,arg],[func,arg,arg],...\n        \n        it launch a fiber for each func\n        the fiber do: resultArray[index] = func.apply(undefined,args)\n        \n     returns array with a result for each function\n     do not \"returns\" until all fibers complete\n\n     throws if error\n\n\nwait.parallel.map = function(arr,mappedFn)\n----------------------\n     \n     Note: must be in a Fiber\n    \n     input: \n        arr: Array\n        mappedFn = function(item,index,arr) \n        \n            mappedFn should return converted item. Since we're in a fiber\n            mappedFn can use wait.for and also throw/try/catch\n        \n\n     returns array with converted items\n     do not \"returns\" until all fibers complete\n\n     throws if error\n\n\nwait.parallel.filter = function(arr, itemTestFn)\n----------------------\n\n     Note: must be in a Fiber\n    \n     input: \n        arr: Array\n        itemTestFn = function(item,index,arr) \n        \n            itemTestFn should return true|false. Since we're in a fiber\n            itemTestFn can use wait.for and also throw/try/catch\n        \n     returns array with items where itemTestFn() returned true\n     do not \"returns\" until all fibers complete\n\n     throws if error\n\n*/\n\n\nwait.parallel = {};\n\nwait.parallel.taskJoiner=function(inx,context,err,data){\n    \n        if (context.finished) return;\n\n        context.count++;\n        //console.log('arrived result',inx,err,data,\"result.count\",context.count,\"task\",context.taskId);\n    \n        if (err) {\n            context.finished = true;\n            return context.finalCallback(err); //err in one of the fibers\n        }\n        else \n            context.results[inx]=data;\n\n        if (context.count>=context.expected) { // all contexts arrived\n            //console.log(\"finall callback. elements:\",context.count);\n            context.finished = true;\n            return context.finalCallback(null,context.results) ; // final callback\n        }\n};\n\nwait.parallel.fiberForItemBody = function(inx,context,functionAndArgs){\n    //console.log('fiber',inx,'calling mappedFunction',args);\n    try{\n        var data = functionAndArgs[0].apply(undefined,functionAndArgs.slice(1));\n        wait.parallel.taskJoiner(inx,context,null,data);\n    }\n    catch(err){\n        wait.parallel.taskJoiner(inx,context,err);\n    }\n};\n\n\nwait.parallel.async_launch = function(functions,finalCallback){\n    //\n    // functions:Array = [function,arg,arg..],[function,arg,arg,...],...\n    // call finalCallback array with results of each func, a fiber is launched for each item\n    // finalCallback is called when all functions complete\n    //\n    var context={results:[],count:0, expected:functions.length, finished:false, finalCallback:finalCallback};\n    if (context.expected===0) return finalCallback(null,context.results);\n\n    //launch a fiber for each item, \n    // each item is an array containing function ptr and arguments\n    for (var i = 0; i < functions.length; i++) {\n        wait.launchFiber(wait.parallel.fiberForItemBody,i,context,functions[i]);\n    };\n};\n\nwait.parallel.launch = function(functions){\n    //\n    // functions = [function,arg,arg],[function,arg,arg],...\n    // returns array with results of each func, a fiber is launched for each item\n    // wait.parallel.returns when all functions complete\n    //\n    return wait.for(wait.parallel.async_launch, functions);\n};\n\nwait.parallel.map = function(arr,mappedFn){\n    // must be in a Fiber\n    //\n    // mappedFn = function(item,index,arr) returns converted item, a fiber is launched for each item\n    //\n    // convert arr into an array of functions + parameters\n    var functions = arr.map(function(item,inx){return [mappedFn,item,inx,arr]});\n    // launch a fiber for each item. wait until all fibers complete\n    return wait.parallel.launch(functions);\n}\n\nwait.parallel.filter = function(arr,itemTestFn){\n    // must be in a Fiber\n    //\n    // mappedFn = function(item,index,arr) returns true/false\n    //\n    var testResults = wait.parallel.map(arr,itemTestFn);\n\n    // create an array for each item where itemTestFn returned true\n    var filteredArr=[];\n    for (var i = 0; i < arr.length; i++) \n        if (testResults[i]) filteredArr.push(arr[i]);\n\n    return filteredArr;\n}\n\nmodule.exports = wait; //export\n","/home/travis/build/npmtest/node-npmtest-wait.for/node_modules/wait.for/waitfor-demo.js":"var fs = require('fs');\nvar http = require('http');\nvar wait = require('./waitfor');\n\n//------------------------------\n// TEST APP - dummy blog server\n//------------------------------\n\nfunction formatPost(post){\n  var lines=post.split('\\n');\n  var result = '<h1>'+lines[0]+'</h1>'\n              + '<h2>'+lines[1]+'</h2>';\n  for(var i=2;i<lines.length;i++)\n      result +='<p>'+lines[i]+'</p>';\n  \n  return result;\n}\n\nfunction composeTemplate(css, template){\n  var composed=template.replace('{{ css }}', css);\n  return composed;\n}\n\nfunction applyTemplate(template, content){\n  return template.replace('{{ content }}', content);\n}\n\nfunction longAsyncFn(inputData,callback){\n\n  var data = 'here it is: '+inputData;\n  var err = Math.random()>0.8? new Error('The ocassional error, Math.random()>0.8') : null;\n  \n  //simulate a long operation\n  setTimeout( function() {\n      callback(err,data)}\n      ,2000);\n}\n\n//handle request in a fiber\nfunction handler(req,res){  \n    try{\n      res.writeHead(200, {'Content-Type': 'text/html'});\n      var start = new Date().getTime();\n      //console.log(start);\n\n      //read css, wait.for syntax:\n      var css = wait.for(fs.readFile,'style.css','utf8');\n\n      //read post, fancy syntax:\n      var content = wait.for(fs.readFile,'blogPost.txt','utf8');\n\n      //compose  template, fancy syntax, as parameter:\n      var template = composeTemplate ( css, wait.for(fs.readFile,'blogTemplate.html','utf8') );\n\n      console.log('about to call hardToGetData...');\n\n      //call async, wait.for syntax, in a expression\n      var hardToGetData = \"\\n\" + start.toString().substr(-5) +\"<br>\" + ( wait.for(longAsyncFn,'some data') );\n\n      console.log('hardToGetData=',hardToGetData);\n      \n      var end = new Date().getTime();\n\n      hardToGetData += ', after '+(end-start)+' ms<br>';\n      hardToGetData += end.toString().substr(-5);\n\n      res.end( applyTemplate(template, formatPost ( content + hardToGetData) ) );\n\n    }\n    catch(err){\n      res.end('ERROR: '+err.message);\n    }\n  }\n\n//----------------\n// Main\n\nvar server = http.createServer(\n  function(req, res){\n    console.log('req!');\n    wait.launchFiber(handler,req,res); //handle in a fiber\n    // keep node spinning\n  }).listen(8000);\n  \nconsole.log('server started on port', 8000);\n"}